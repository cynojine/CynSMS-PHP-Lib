<?php
/*
 * CynSMSAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace CynSMSAPILib\Controllers;

use CynSMSAPILib\APIException;
use CynSMSAPILib\APIHelper;
use CynSMSAPILib\Configuration;
use CynSMSAPILib\Models;
use CynSMSAPILib\Exceptions;
use CynSMSAPILib\Http\HttpRequest;
use CynSMSAPILib\Http\HttpResponse;
use CynSMSAPILib\Http\HttpMethod;
use CynSMSAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class APIController extends BaseController
{
    /**
     * @var APIController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return APIController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * @todo Add general description for this endpoint
     *
     * @param string $apiKey  set your API_KEY from http://sms.cynojine.com/sms-api/info (user panel)
     * @param string $to      the number we are sending to - Any phone number
     * @param string $sms     SMS Body
     * @param string $from    Change the from number below. It can be a valid phone number or a String
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendSMS(
        $apiKey,
        $to,
        $sms,
        $from
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api?action=send-sms';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'api key' => $apiKey,
            'to'      => $to,
            'sms'     => $sms,
            'from'    => $from,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::$BASEURI . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Checking SMS Balance
     *
     * @param  array  $options    Array with all options for search
     * @param string $options['apiKey']   Get your account balance
     * @param string $options['response'] Json Responce
     * @param  array  $queryParameters    Additional optional query parameters are supported by this endpoint
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getBALANCECHECK(
        $options,
        $queryParameters = null
    ) {

        //prepare query string for API call
        $_queryBuilder = '/api?action=check-balance';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'api_key'  => $this->val($options, 'apiKey'),
            'response' => $this->val($options, 'response'),
        ));

        //append optional parameters to the query
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, $queryParameters);

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::$BASEURI . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }


    /**
    * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found
     * @return mixed
     */
    private function val($arr, $key, $default = null)
    {
        if (isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }
}
